@model WebApplication1.Models.Localization.CompositeViewsModels.UserEditCompositeViewModel

@{
    ViewBag.Title = @Model.EditViewModel.EditOperation;
}

<h2>@Model.EditViewModel.EditOperation</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "myForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@Model.EditViewModel.User</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.User.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.User.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.User.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.User.Surname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.Surname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.User.Surname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.User.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.Age, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.User.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.User.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.User.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.User.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.User.Address, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.User.Country.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.User.Country.Name,
                    (SelectList)ViewBag.CountriesSelectList,
                    new { @class = "form-control", @id = "countryDropdown" })
                @Html.ValidationMessageFor(model => model.User.Country.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" onclick="submitForm()" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink(@Model.EditViewModel.BackToList, "User")
</div>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript">
    function submitForm() {
        var form = $('#myForm');
        var formData = form.serialize();

        $.ajax({
            url: '@Url.Action("UpdateUser", "User")',
            type: 'PUT',
            data: formData,
            success: function(response) {
                if (response.success) {
                    alert('@Model.EditViewModel.SuccessfulResult');
                    window.location.href = '@Url.Action("User", "User")';
                } else {
                    if (response.errors) {
                        var errorMessages = response.errors.join('\n');
                        alert('@Model.EditViewModel.ValidationError\n' + errorMessages);
                    } else {
                        alert('@Model.EditViewModel.Error' + response.message);
                    }
                }
            },
            error: function(xhr, status, error) {
                alert('@Model.EditViewModel.ErrorOccured' + xhr.responseText || error);
            }
        });
    }
    </script>
}
